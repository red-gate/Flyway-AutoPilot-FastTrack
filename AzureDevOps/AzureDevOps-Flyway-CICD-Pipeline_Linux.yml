# This is a best practice Flyway Enterprise workflow to help you get started with Azure DevOps and a Linux Runner

name: Flyway-AutoPilot-Simple-Pipeline-Linux

trigger: none
# Uncomment to enable triggers on specific branches or paths:
# branches:
#   include:
#     - release
# paths:
#   include:
#     - migrations/*

### Step 1: Define Stage Variables ###
### Build Stage Variables - Create a group named 'AutoPilotBuild' ###
### To Create a Libary Variable Group, Click Pipelines > Library > + Variable Group ###
# TARGET_DATABASE_URL - Leave blank to use the database URL from the Flyway Project TOML file.
# Example: jdbc:sqlserver://localhost;instanceName=SQLEXPRESS;databaseName=AutoPilotDev;encrypt=true;integratedSecurity=true;trustServerCertificate=true
# TARGET_DATABASE_USERNAME: Leave blank if using integratedSecurity (default).
# TARGET_DATABASE_PASSWORD: Leave blank if using integratedSecurity (default).
### End of Build Stage Variable Group ###

### Test Stage Variables - Create a group named 'AutoPilotTest' ###
### To Create a Libary Variable Group, Click Pipelines > Library > + Variable Group ###
# TARGET_DATABASE_URL: Leave blank to use the Flyway Project TOML file.
# Example: jdbc:sqlserver://localhost;instanceName=SQLEXPRESS;databaseName=AutoPilotTest;encrypt=true;integratedSecurity=true;trustServerCertificate=true
# TARGET_DATABASE_USERNAME: Leave blank if using integratedSecurity (default).
# TARGET_DATABASE_PASSWORD: Leave blank if using integratedSecurity (default).
# REPORT_DATABASE_URL: Same default behavior as TARGET_DATABASE_URL.
# REPORT_DATABASE_USERNAME: Leave blank if using integratedSecurity (default).
# REPORT_DATABASE_PASSWORD: Leave blank if using integratedSecurity (default).
### End of Test Stage Variable Group ###

### Prod Stage Variables - Create a group named'AutoPilotProd' ###
### To Create a Libary Variable Group, Click Pipelines > Library > + Variable Group ###
# TARGET_DATABASE_URL: Leave blank to use the Flyway Project TOML file.
# Example: jdbc:sqlserver://localhost;instanceName=SQLEXPRESS;databaseName=AutoPilotTest;encrypt=true;integratedSecurity=true;trustServerCertificate=true
# TARGET_DATABASE_USERNAME: Leave blank if using integratedSecurity (default).
# TARGET_DATABASE_PASSWORD: Leave blank if using integratedSecurity (default).
# REPORT_DATABASE_URL: Same default behavior as TARGET_DATABASE_URL.
# REPORT_DATABASE_USERNAME: Leave blank if using integratedSecurity (default).
# REPORT_DATABASE_PASSWORD: Leave blank if using integratedSecurity (default).
### End of Prod Stage Variable Group ###                                                                                                                         
pool:
  # Step 2 - Set the agent pool #
  name: "$(AGENT_POOL)" # For use with the default Self-Hosted agent setup
  #vmImage: "$(AGENT_POOL)" # Uncomment for Microsoft-hosted agents (e.g., ubuntu-latest or windows-latest)

variables:

  # Path to the migrations folder in your project (default is the same directory as this YAML file)
  WORKING_DIRECTORY: $(System.DefaultWorkingDirectory)
  system.debug: 'false' # Set to true for verbose logging during pipeline runs
  
  # Step 3: Authenticate Flyway with Personal Access Tokens (PATs)
  # To create a Library Variable Group: Go to Pipelines > Library > + Variable Group
  group: "AutoPilotGlobal" # Includes variables FLYWAY_EMAIL, FLYWAY_TOKEN, AGENT_POOL
  # FLYWAY_EMAIL: Email linked to the Redgate account that created the PAT.
  # FLYWAY_TOKEN: PAT value (treat like a password; use secure variables or a Library Group).
  # AGENT_POOL: The name of the agent pool to be used throughout the pipeline

  BASELINE_VERSION: "001" # This should match the version number of your baseline script
  FIRST_UNDO_SCRIPT: "002" # This should match the first undo version in your project

  # Optional - For ephemeral agents/runners, it's necessary to validate Flyway is installed on each run. Set the below to true to enable the functionality
  FLYWAY_CLI_INSTALL_CHECK: "false" # Setting to false will skip the Flyway CLI check step
  FLYWAY_VERSION: "Latest" # Use 'Latest' or a specific version like '11.0.0'.
  FLYWAY_INSTALL_DIRECTORY: ""  #Path to install Flyway CLI on the agent machine.

  # Optional: Side Quest #1 - Enable Flyway Pipeline Integration for tracking releases and drift. - https://flyway.red-gate.com/
  FLYWAY_PUBLISH_RESULT: "true" # Set this value to true to enable Flyway Pipelines and track your releases centrally!
  FLYWAY_DRIFT_ON_MIGRATE: "true" # Set this value to true to enable Flyway Pipelines drift detection and track your drift centrally!

  ### End of Pipeline Variables - No further changes required below this line for default workflow ###

stages:
  - stage: Build 
    displayName: Build Stage 
    # Use a custom Agent Pool if needed for this stage:
    # pool: ""
    jobs:
    - job: Build
      variables:
      - group: "AutoPilotGlobal" # Expected Variables - FLYWAY_EMAIL/FLYWAY_TOKEN/AGENT_POOL
      - group: "AutoPilotBuild" # Expected Variables - TARGET_DATABASE_URL/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD
      - name: DATABASE_NAME
        value: "AutoPilotBuild"
      - name: Environment
        value: "Build" # This variable refers to the environment name present in the Flyway Projects TOML file.
      - name: CUSTOM_PARAMETERS
        value: $[coalesce(variables['CUSTOM_PARAMS'], '')] # Secure method of adding custom Flyway Parameters (Example -X for debug). Default value of '' used if no Custom Params found.'
      - name: EXECUTE_BUILD
        value: "true" # Turn to false to skip the build stage tasks
      - name: publishArtifacts
        value: "true" # Turn to false to skip the artifact upload

      steps:

        # Pre-Req - Optional - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3
          displayName: 'Flyway CLI - Validate and Install Check'  
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: and(succeeded(), eq(variables['EXECUTE_BUILD'], true))
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        # Step 2 - Ensure the Build Database is cleaned of all objects, meaning the build starts from scratch
        - script: |
            flyway info clean info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -configFiles="$(WORKING_DIRECTORY)/flyway.toml" -locations="filesystem:$(WORKING_DIRECTORY)/migrations" $(CUSTOM_PARAMETERS)
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Clean Build DB'
          condition: and(succeeded(), eq(variables['EXECUTE_BUILD'], true))
          env:
            FLYWAY_CLEAN_DISABLED: false # This should only be disabled for temporary sandbox databases, like Build
        # Step 3 - Migrate all scripts from the migration folder, to verify they can be deployed against an empty database. This is the quickest way to get feedback about problematic scripts
        - script: |
            flyway info migrate info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -baselineOnMigrate=true -configFiles="$(WORKING_DIRECTORY)/flyway.toml" -locations="filesystem:$(WORKING_DIRECTORY)/migrations" "-publishResult=$(FLYWAY_PUBLISH_RESULT)" "-flywayServicePublish.publishReport=$(FLYWAY_PUBLISH_RESULT)" "-reportEnabled=$(FLYWAY_PUBLISH_RESULT)" $(CUSTOM_PARAMETERS)
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          condition: and(succeeded(), eq(variables['EXECUTE_BUILD'], true))
          displayName: 'Validate Migrate Scripts'
        # Step 4 (Optional) - Undo all relevant migrations using corresponding rollback script, to validate they can be run. This helps to reduce the chance the script will fail during a real life rollback scenario 
        - script: |
            flyway info undo info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -configFiles="$(WORKING_DIRECTORY)/flyway.toml" -locations="filesystem:$(WORKING_DIRECTORY)/migrations" -target="$(FIRST_UNDO_SCRIPT)" $(CUSTOM_PARAMETERS)
          continueOnError: true
          workingDirectory: '$(WORKING_DIRECTORY)'
          condition: and(succeeded(), eq(variables['EXECUTE_BUILD'], true))
          displayName: 'Validate Undo Scripts'
        # ADO - Copy in-scope build files to artifact directory 
        - task: CopyFiles@2
          condition: succeeded()
          inputs:
            SourceFolder: '$(WORKING_DIRECTORY)'
            Contents: |
              !flyway-*/**/*
              !.git/**/*
              !.git*/**/*
              **/schema-model/**/*
              **/migrations/**/*
              **/backups/**/*
              **/flyway.toml
              **/Filter.scpf
            TargetFolder: '$(System.ArtifactsDirectory)'
        # ADO - Publish Artifact Directory
        - task: PublishBuildArtifacts@1 # This step publishes all the validated Flyway Project files as a build artifact
          condition: succeeded()
          displayName: 'Publish Build Artifact'
          inputs:
            ArtifactName: 'Flyway-CI-$(Build.BuildId)'
            PathtoPublish: '$(System.ArtifactsDirectory)'

  - stage: Test
    displayName: Test Stage
    dependsOn: Build
    variables:
      - group: "AutoPilotGlobal" # Expected Variables - FLYWAY_EMAIL/FLYWAY_TOKEN/AGENT_POOL
      - group: "AutoPilotTest" # Expected Variables - TARGET_DATABASE_URL/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD/REPORT_DATABASE_URL/REPORT_DATABASE_USER/REPORT_DATABASE_PASSWORD
      - name: DATABASE_NAME
        value: "AutoPilotTest"
      - name: ENVIRONMENT
        value: "Test" # Refers to the environment in the Flyway Project TOML file.
      - name: REPORT_ENVIRONMENT
        value: "Check" # Refers to the report environment in the Flyway Project TOML file.
      - name: CUSTOM_PARAMETERS
        value: $[coalesce(variables['CUSTOM_PARAMS'], '')] # Secure method of adding custom Flyway Parameters (Example -X for debug). Default value of '' used if no Custom Params found.'
      - name: generateReport
        value: "true" # Set to false to skip the report generation step
      - name: FLYWAY_CHECK_DRIFT_ON_MIGRATE
        value: "$(FLYWAY_DRIFT_ON_MIGRATE)" # Set to true to enable the Flyway Pipelines Drift Detection functionality
    jobs:
    - job: ChangeReport
      displayName: "Flyway - Pre Release Change Report"
      condition: 
      variables:
        EXAMPLE: ""
      steps:
        # Pre-Req - Optional - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3
          displayName: 'Flyway CLI - Validate and Install Check'
          condition: and(eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true), eq(variables['generateReport'], true))
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Pre-Req - Download Build Artifact
        - task: DownloadBuildArtifacts@0
          condition: eq(variables['generateReport'], true)
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: and(succeeded(), eq(variables['generateReport'], true))
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        # Step 2 - Create Check Report
        - script: |
              flyway check -dryrun -changes -drift info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -check.buildEnvironment="$(REPORT_ENVIRONMENT)" -environments.$(REPORT_ENVIRONMENT).user="$(REPORT_DATABASE_USERNAME)" -environments.$(REPORT_ENVIRONMENT).password="$(REPORT_DATABASE_PASSWORD)" -configFiles="$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/flyway.toml" -locations="filesystem:$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/migrations" "-reportFilename=$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/reports/$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html" "-publishResult=$(FLYWAY_PUBLISH_RESULT)" "-flywayServicePublish.publishReport=$(FLYWAY_PUBLISH_RESULT)" "-reportEnabled=$(FLYWAY_PUBLISH_RESULT)" $(CUSTOM_PARAMETERS)
          workingDirectory: '$(WORKING_DIRECTORY)'
          condition: and(succeeded(), eq(variables['generateReport'], true))
          continueOnError: false
          displayName: 'Flyway Check Report'
        # Step 3 - Publish Check Report
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Check Report'
          condition: and(succeeded(), eq(variables['generateReport'], true))
          inputs:
            ArtifactName: 'Flyway-CD-Reports-$(Build.BuildId)'
            PathtoPublish: '$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/reports/$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html'
        
    - job: CodeReview
      displayName: Code Review
      dependsOn: ChangeReport
      pool: server
      steps:
        # Optional - Manual Validation Step
        - task: ManualValidation@0
          condition: eq(variables['pauseForCodeReview'], true)
          displayName: 'Review Change Report Prior To Release'
          timeoutInMinutes: 4320 
          inputs:
            notifyUsers: |
              user@email.com
              example@example.com
            instructions: 'Review changes'
        
    - job: Deploy
      displayName: "Deploy"
      dependsOn: CodeReview
      variables:
        EXAMPLE: ""
      steps:
        # Pre-Req - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3  
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
          displayName: 'Flyway CLI - Validate and Install Check'
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Pre-Req - Download Build Artifact
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: succeeded()
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        # Step 2 - Flyway - Deploy Pending migrations to target environment
        - script: |
            flyway info migrate info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -baselineOnMigrate=true -baselineVersion="$(BASELINE_VERSION)" -configFiles="$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/flyway.toml" -locations="filesystem:$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/migrations" "-publishResult=$(FLYWAY_PUBLISH_RESULT)" "-flywayServicePublish.publishReport=$(FLYWAY_PUBLISH_RESULT)" "-reportEnabled=$(FLYWAY_PUBLISH_RESULT)" $(CUSTOM_PARAMETERS)
          condition: succeeded()
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Migrate Test DB'
  
  - stage: Prod
    displayName: Prod Stage
    dependsOn: Test
    # Use a custom Agent Pool if needed for this stage:
    # pool: ""
    variables:
      - group: "AutoPilotGlobal" # Expected Variables - FLYWAY_EMAIL/FLYWAY_TOKEN/AGENT_POOL
      - group: "AutoPilotProd" # Expected Variables - TARGET_DATABASE_URL/TARGET_DATABASE_USER/TARGET_DATABASE_PASSWORD/REPORT_DATABASE_URL/REPORT_DATABASE_USER/REPORT_DATABASE_PASSWORD
      # Example Variable syntax if required. Sensitive values should ALWAYS be kept secure
      - name: DATABASE_NAME
        value: "AutoPilotProd"
      - name: ENVIRONMENT 
        value: "Prod" # Refers to the environment name in the Flyway Project TOML file.
      - name: REPORT_ENVIRONMENT
        value: "Check" # Refers to the report environment name in the Flyway Project TOML file.
      - name: CUSTOM_PARAMETERS
        value: $[coalesce(variables['CUSTOM_PARAMS'], '')] # Secure method of adding custom Flyway Parameters (Example -X for debug). Default value of '' used if no Custom Params found.'
      - name: generateReport
        value: "true" # Set to false to skip the report generation creation step
      - name: FLYWAY_CHECK_DRIFT_ON_MIGRATE
        value: "$(FLYWAY_DRIFT_ON_MIGRATE)" # Set to true to enable the Flyway Pipelines Drift Detection functionality
    jobs:
    - job: ChangeReport
      displayName: "Flyway - Pre Release Change Report"
      condition:
      variables:
        EXAMPLE: ""
      steps:
        # Pre-Req - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3  
          displayName: 'Flyway CLI - Validate and Install Check'
          condition: and(eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true), eq(variables['generateReport'], true))
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Pre-Req - Download Build Artifact
        - task: DownloadBuildArtifacts@0
          condition: eq(variables['generateReport'], true)
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
        # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: and(succeeded(), eq(variables['generateReport'], true))
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        # Step 2 - Create Check Report
        - script: |
              flyway check -dryrun -changes -drift info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -check.buildEnvironment="$(REPORT_ENVIRONMENT)" -environments.$(REPORT_ENVIRONMENT).user="$(REPORT_DATABASE_USERNAME)" -environments.$(REPORT_ENVIRONMENT).password="$(REPORT_DATABASE_PASSWORD)" -configFiles="$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/flyway.toml" -locations="filesystem:$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/migrations" "-reportFilename=$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/reports/$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html" "-publishResult=$(FLYWAY_PUBLISH_RESULT)" "-flywayServicePublish.publishReport=$(FLYWAY_PUBLISH_RESULT)" "-reportEnabled=$(FLYWAY_PUBLISH_RESULT)" $(CUSTOM_PARAMETERS)
          workingDirectory: '$(WORKING_DIRECTORY)'
          condition: eq(variables['generateReport'], true)
          continueOnError: false
          displayName: 'Flyway Check Report'
        # Step 3 - Publish Check Report
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Check Report'
          condition: eq(variables['generateReport'], true)
          inputs:
            ArtifactName: 'Flyway-CD-Reports-$(Build.BuildId)'
            PathtoPublish: '$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/reports/$(DATABASE_NAME)-Run-$(Build.BuildId)-Check-Report.html'

    - job: CodeReview
      displayName: Code Review
      dependsOn: ChangeReport
      pool: server
      steps:
        - task: ManualValidation@0
          displayName: 'Review Change Report Prior To Release'
          condition: eq(variables['generateReport'], true)
          timeoutInMinutes: 4320
          inputs:
            notifyUsers: |
              user@email.com
              example@example.com
            instructions: 'Review changes'
        
    - job: Deploy
      displayName: "Deploy"
      dependsOn: CodeReview
      variables:
        EXAMPLE: ""
      steps:
        # Pre-Req - Check if Flyway CLI Installed and Available on Agent
        - task: Bash@3  
          condition: eq(variables['FLYWAY_CLI_INSTALL_CHECK'], true)
          displayName: 'Flyway CLI - Validate and Install Check'
          inputs:
            targetType: 'filePath'
            filePath: '$(WORKING_DIRECTORY)/Scripts/Flyway_DownloadAndInstallCLI_Unix.sh'
        # Pre-Req - Download Build Artifact
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'Flyway-CI-$(Build.BuildId)'
            downloadPath: '$(System.ArtifactsDirectory)'
         # Step 1 - Flyway License Authentication
        - script: |
            flyway auth -IAgreeToTheEula -email="$(FLYWAY_EMAIL)" -token="$(FLYWAY_TOKEN)"
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Flyway Authentication'
          condition: succeeded()
          env:
            FLYWAY_EMAIL: $(FLYWAY_EMAIL)
            FLYWAY_TOKEN: $(FLYWAY_TOKEN)
        # Flyway - Deploy Pending migrations to target environment
        - script: |
            flyway info migrate info -environment="$(TARGET_ENVIRONMENT)" -user="$(TARGET_DATABASE_USERNAME)" -password="$(TARGET_DATABASE_PASSWORD)" -baselineOnMigrate=true -baselineVersion="$(BASELINE_VERSION)" -configFiles="$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/flyway.toml" -locations="filesystem:$(System.ArtifactsDirectory)/Flyway-CI-$(Build.BuildId)/migrations" "-publishResult=$(FLYWAY_PUBLISH_RESULT)" "-flywayServicePublish.publishReport=$(FLYWAY_PUBLISH_RESULT)" "-reportEnabled=$(FLYWAY_PUBLISH_RESULT)" $(CUSTOM_PARAMETERS)
          condition: succeeded()
          continueOnError: false
          workingDirectory: '$(WORKING_DIRECTORY)'
          displayName: 'Migrate Prod DB'
